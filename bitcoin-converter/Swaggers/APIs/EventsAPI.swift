//
// EventsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class EventsAPI {
    /**
     Get list of event countries

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func eventsCountriesGet(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        eventsCountriesGetWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get list of event countries
     - GET /events/countries


     - returns: RequestBuilder<Void> 
     */
    open class func eventsCountriesGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/events/countries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get events, paginated by 100

     - parameter countryCode: (query) country_code of event (eg. &#x27;US&#x27;). use &lt;b&gt;/api/v3/events/countries&lt;/b&gt; for list of country_codes (optional)
     - parameter type: (query) type of event (eg. &#x27;Conference&#x27;). use &lt;b&gt;/api/v3/events/types&lt;/b&gt; for list of types (optional)
     - parameter page: (query) page of results (paginated by 100) (optional)
     - parameter upcomingEventsOnly: (query) lists only upcoming events. &lt;br&gt;true, false&lt;/br&gt; (defaults to true, set to false to list all events) (optional)
     - parameter fromDate: (query) lists events after this date yyyy-mm-dd (optional)
     - parameter toDate: (query) lists events before this date yyyy-mm-dd (set upcoming_events_only to false if fetching past events) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func eventsGet(countryCode: String? = nil, type: String? = nil, page: String? = nil, upcomingEventsOnly: String? = nil, fromDate: String? = nil, toDate: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        eventsGetWithRequestBuilder(countryCode: countryCode, type: type, page: page, upcomingEventsOnly: upcomingEventsOnly, fromDate: fromDate, toDate: toDate).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get events, paginated by 100
     - GET /events

     - parameter countryCode: (query) country_code of event (eg. &#x27;US&#x27;). use &lt;b&gt;/api/v3/events/countries&lt;/b&gt; for list of country_codes (optional)
     - parameter type: (query) type of event (eg. &#x27;Conference&#x27;). use &lt;b&gt;/api/v3/events/types&lt;/b&gt; for list of types (optional)
     - parameter page: (query) page of results (paginated by 100) (optional)
     - parameter upcomingEventsOnly: (query) lists only upcoming events. &lt;br&gt;true, false&lt;/br&gt; (defaults to true, set to false to list all events) (optional)
     - parameter fromDate: (query) lists events after this date yyyy-mm-dd (optional)
     - parameter toDate: (query) lists events before this date yyyy-mm-dd (set upcoming_events_only to false if fetching past events) (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func eventsGetWithRequestBuilder(countryCode: String? = nil, type: String? = nil, page: String? = nil, upcomingEventsOnly: String? = nil, fromDate: String? = nil, toDate: String? = nil) -> RequestBuilder<Void> {
        let path = "/events"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "country_code": countryCode, 
                        "type": type, 
                        "page": page, 
                        "upcoming_events_only": upcomingEventsOnly, 
                        "from_date": fromDate, 
                        "to_date": toDate
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get list of events types

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func eventsTypesGet(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        eventsTypesGetWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get list of events types
     - GET /events/types


     - returns: RequestBuilder<Void> 
     */
    open class func eventsTypesGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/events/types"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
