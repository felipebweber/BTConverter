//
// ExchangesBetaAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ExchangesBetaAPI {
    /**
     List all exchanges

     - parameter perPage: (query) Valid values: 1...250 Total results per page Default value:: 100 (optional)
     - parameter page: (query) page through results (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exchangesGet(perPage: Int? = nil, page: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        exchangesGetWithRequestBuilder(perPage: perPage, page: page).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     List all exchanges
     - GET /exchanges

     - parameter perPage: (query) Valid values: 1...250 Total results per page Default value:: 100 (optional)
     - parameter page: (query) page through results (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func exchangesGetWithRequestBuilder(perPage: Int? = nil, page: String? = nil) -> RequestBuilder<Void> {
        let path = "/exchanges"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "per_page": perPage?.encodeToJSON(), 
                        "page": page
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get exchange volume in BTC and top 100 tickers only

     - parameter _id: (path) pass the exchange id (can be obtained from /exchanges/list) eg. binance 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exchangesIdGet(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        exchangesIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get exchange volume in BTC and top 100 tickers only
     - GET /exchanges/{id}

     - parameter _id: (path) pass the exchange id (can be obtained from /exchanges/list) eg. binance 

     - returns: RequestBuilder<Void> 
     */
    open class func exchangesIdGetWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/exchanges/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get status updates for a given exchange (beta)

     - parameter _id: (path) pass the exchange id (can be obtained from /exchanges/list) eg. binance 
     - parameter perPage: (query) Total results per page (optional)
     - parameter page: (query) Page through results (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exchangesIdStatusUpdatesGet(_id: String, perPage: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        exchangesIdStatusUpdatesGetWithRequestBuilder(_id: _id, perPage: perPage, page: page).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get status updates for a given exchange (beta)
     - GET /exchanges/{id}/status_updates

     - parameter _id: (path) pass the exchange id (can be obtained from /exchanges/list) eg. binance 
     - parameter perPage: (query) Total results per page (optional)
     - parameter page: (query) Page through results (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func exchangesIdStatusUpdatesGetWithRequestBuilder(_id: String, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<Void> {
        var path = "/exchanges/{id}/status_updates"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "per_page": perPage?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get exchange tickers (paginated, 100 tickers per page)

     - parameter _id: (path) pass the exchange id (can be obtained from /exchanges/list) eg. binance 
     - parameter coinIds: (query) filter tickers by coin_ids (ref: v3/coins/list) (optional)
     - parameter includeExchangeLogo: (query) flag to show exchange_logo (optional)
     - parameter page: (query) Page through results (optional)
     - parameter order: (query) valid values: &lt;b&gt;trust_score_desc (default), trust_score_asc and volume_desc&lt;/b&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exchangesIdTickersGet(_id: String, coinIds: String? = nil, includeExchangeLogo: String? = nil, page: Int? = nil, order: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        exchangesIdTickersGetWithRequestBuilder(_id: _id, coinIds: coinIds, includeExchangeLogo: includeExchangeLogo, page: page, order: order).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get exchange tickers (paginated, 100 tickers per page)
     - GET /exchanges/{id}/tickers

     - parameter _id: (path) pass the exchange id (can be obtained from /exchanges/list) eg. binance 
     - parameter coinIds: (query) filter tickers by coin_ids (ref: v3/coins/list) (optional)
     - parameter includeExchangeLogo: (query) flag to show exchange_logo (optional)
     - parameter page: (query) Page through results (optional)
     - parameter order: (query) valid values: &lt;b&gt;trust_score_desc (default), trust_score_asc and volume_desc&lt;/b&gt; (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func exchangesIdTickersGetWithRequestBuilder(_id: String, coinIds: String? = nil, includeExchangeLogo: String? = nil, page: Int? = nil, order: String? = nil) -> RequestBuilder<Void> {
        var path = "/exchanges/{id}/tickers"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "coin_ids": coinIds, 
                        "include_exchange_logo": includeExchangeLogo, 
                        "page": page?.encodeToJSON(), 
                        "order": order
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get volume_chart data for a given exchange (beta)

     - parameter _id: (path) pass the exchange id (can be obtained from /exchanges/list) eg. binance 
     - parameter days: (query)  Data up to number of days ago (eg. 1,14,30) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exchangesIdVolumeChartGet(_id: String, days: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        exchangesIdVolumeChartGetWithRequestBuilder(_id: _id, days: days).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get volume_chart data for a given exchange (beta)
     - GET /exchanges/{id}/volume_chart

     - parameter _id: (path) pass the exchange id (can be obtained from /exchanges/list) eg. binance 
     - parameter days: (query)  Data up to number of days ago (eg. 1,14,30) 

     - returns: RequestBuilder<Void> 
     */
    open class func exchangesIdVolumeChartGetWithRequestBuilder(_id: String, days: Int) -> RequestBuilder<Void> {
        var path = "/exchanges/{id}/volume_chart"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "days": days.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List all supported markets id and name (no pagination required)

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exchangesListGet(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        exchangesListGetWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     List all supported markets id and name (no pagination required)
     - GET /exchanges/list


     - returns: RequestBuilder<Void> 
     */
    open class func exchangesListGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/exchanges/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
