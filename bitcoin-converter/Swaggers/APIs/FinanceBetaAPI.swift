//
// FinanceBetaAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class FinanceBetaAPI {
    /**
     List all finance platforms

     - parameter page: (path) page of results (paginated to 100 by default) 
     - parameter perPage: (query) Total results per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func financePlatformsGet(page: String, perPage: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        financePlatformsGetWithRequestBuilder(page: page, perPage: perPage).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     List all finance platforms
     - GET /finance_platforms

     - parameter page: (path) page of results (paginated to 100 by default) 
     - parameter perPage: (query) Total results per page (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func financePlatformsGetWithRequestBuilder(page: String, perPage: Int? = nil) -> RequestBuilder<Void> {
        var path = "/finance_platforms"
        let pagePreEscape = "\(page)"
        let pagePostEscape = pagePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{page}", with: pagePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "per_page": perPage?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List all finance products

     - parameter page: (path) page of results (paginated to 100 by default) 
     - parameter startAt: (path) start date of the financial products 
     - parameter endAt: (path) end date of the financial products 
     - parameter perPage: (query) Total results per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func financeProductsGet(page: String, startAt: String, endAt: String, perPage: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        financeProductsGetWithRequestBuilder(page: page, startAt: startAt, endAt: endAt, perPage: perPage).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     List all finance products
     - GET /finance_products

     - parameter page: (path) page of results (paginated to 100 by default) 
     - parameter startAt: (path) start date of the financial products 
     - parameter endAt: (path) end date of the financial products 
     - parameter perPage: (query) Total results per page (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func financeProductsGetWithRequestBuilder(page: String, startAt: String, endAt: String, perPage: Int? = nil) -> RequestBuilder<Void> {
        var path = "/finance_products"
        let pagePreEscape = "\(page)"
        let pagePostEscape = pagePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{page}", with: pagePostEscape, options: .literal, range: nil)
        let startAtPreEscape = "\(startAt)"
        let startAtPostEscape = startAtPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{start_at}", with: startAtPostEscape, options: .literal, range: nil)
        let endAtPreEscape = "\(endAt)"
        let endAtPostEscape = endAtPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{end_at}", with: endAtPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "per_page": perPage?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
