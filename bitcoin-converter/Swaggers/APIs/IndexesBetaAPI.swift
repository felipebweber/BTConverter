//
// IndexesBetaAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class IndexesBetaAPI {
    /**
     List all market indexes

     - parameter perPage: (query) Total results per page (optional)
     - parameter page: (query) Page through results (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func indexesGet(perPage: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        indexesGetWithRequestBuilder(perPage: perPage, page: page).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     List all market indexes
     - GET /indexes

     - parameter perPage: (query) Total results per page (optional)
     - parameter page: (query) Page through results (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func indexesGetWithRequestBuilder(perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<Void> {
        let path = "/indexes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "per_page": perPage?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     get market index by id

     - parameter _id: (path) pass the index id (can be obtained from /indexes/list) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func indexesIdGet(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        indexesIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     get market index by id
     - GET /indexes/{id}

     - parameter _id: (path) pass the index id (can be obtained from /indexes/list) 

     - returns: RequestBuilder<Void> 
     */
    open class func indexesIdGetWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/indexes/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     list market indexes id and name

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func indexesListGet(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        indexesListGetWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     list market indexes id and name
     - GET /indexes/list


     - returns: RequestBuilder<Void> 
     */
    open class func indexesListGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/indexes/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
