//
// DerivativesBetaAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DerivativesBetaAPI {
    /**
     List all derivative exchanges

     - parameter order: (query) order results using following params name_asc，name_desc，open_interest_btc_asc，open_interest_btc_desc，trade_volume_24h_btc_asc，trade_volume_24h_btc_desc (optional)
     - parameter perPage: (query) Total results per page (optional)
     - parameter page: (query) Page through results (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func derivativesExchangesGet(order: String? = nil, perPage: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        derivativesExchangesGetWithRequestBuilder(order: order, perPage: perPage, page: page).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     List all derivative exchanges
     - GET /derivatives/exchanges

     - parameter order: (query) order results using following params name_asc，name_desc，open_interest_btc_asc，open_interest_btc_desc，trade_volume_24h_btc_asc，trade_volume_24h_btc_desc (optional)
     - parameter perPage: (query) Total results per page (optional)
     - parameter page: (query) Page through results (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func derivativesExchangesGetWithRequestBuilder(order: String? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<Void> {
        let path = "/derivatives/exchanges"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "order": order, 
                        "per_page": perPage?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     show derivative exchange data

     - parameter _id: (path) pass the exchange id (can be obtained from derivatives/exchanges/list) eg. bitmex 
     - parameter includeTickers: (query) [&#x27;all&#x27;, &#x27;unexpired&#x27;] - expired to show unexpired tickers, all to list all tickers, leave blank to omit tickers data in response (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func derivativesExchangesIdGet(_id: String, includeTickers: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        derivativesExchangesIdGetWithRequestBuilder(_id: _id, includeTickers: includeTickers).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     show derivative exchange data
     - GET /derivatives/exchanges/{id}

     - parameter _id: (path) pass the exchange id (can be obtained from derivatives/exchanges/list) eg. bitmex 
     - parameter includeTickers: (query) [&#x27;all&#x27;, &#x27;unexpired&#x27;] - expired to show unexpired tickers, all to list all tickers, leave blank to omit tickers data in response (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func derivativesExchangesIdGetWithRequestBuilder(_id: String, includeTickers: String? = nil) -> RequestBuilder<Void> {
        var path = "/derivatives/exchanges/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "include_tickers": includeTickers
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List all derivative exchanges name and identifier

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func derivativesExchangesListGet(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        derivativesExchangesListGetWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     List all derivative exchanges name and identifier
     - GET /derivatives/exchanges/list


     - returns: RequestBuilder<Void> 
     */
    open class func derivativesExchangesListGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/derivatives/exchanges/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List all derivative tickers

     - parameter includeTickers: (query) [&#x27;all&#x27;, &#x27;unexpired&#x27;] - expired to show unexpired tickers, all to list all tickers, defaults to unexpired (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func derivativesGet(includeTickers: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        derivativesGetWithRequestBuilder(includeTickers: includeTickers).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     List all derivative tickers
     - GET /derivatives

     - parameter includeTickers: (query) [&#x27;all&#x27;, &#x27;unexpired&#x27;] - expired to show unexpired tickers, all to list all tickers, defaults to unexpired (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func derivativesGetWithRequestBuilder(includeTickers: String? = nil) -> RequestBuilder<Void> {
        let path = "/derivatives"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "include_tickers": includeTickers
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
